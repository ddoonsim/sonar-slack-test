name: SonarQube Analysis & Slack Notification

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  SONAR_HOST_URL:    ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN:       ${{ secrets.SONAR_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SONAR_PROJECT_KEY: Sonar-slack-test

jobs:
  build:
    name: 🛠 Build (Java 1.8 with Toolchains)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '8'

      - name: Create toolchains.xml for JDK8
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/toolchains.xml <<EOF
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>1.8</version>
              </provides>
              <configuration>
                <jdkHome>$JAVA_HOME</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOF

      - name: Cache local Maven repo
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven (skip RAT & Toolchains)
        run: |
          chmod +x mvnw
          ./mvnw clean verify \
            -Dtoolchains.skip=true \
            -Drat.skip=true

  sonar:
    name: 🔍 SonarQube Analysis (Java 11)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Sonar Scanner files
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Run SonarQube Scanner (skip toolchains & RAT)
        run: |
          chmod +x mvnw
          ./mvnw \
            -Dmaven.toolchains.skip=true \
            -Drat.skip=true \
            sonar:sonar \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -Dsonar.exclusions=**/*.java

      - name: Get Quality Gate Status
        id: quality_gate
        run: |
          TASK_URL=$(grep -oP 'ceTaskUrl=\K.*' target/sonar/report-task.txt)
          TASK_ID=${TASK_URL##*=}
          STATUS=$(curl -s -u "${{ env.SONAR_TOKEN }}:" \
            "${{ env.SONAR_HOST_URL }}/api/qualitygates/project_status?taskId=$TASK_ID" \
            | jq -r .projectStatus.status)
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: Get Additional Sonar Metrics
        id: metrics
        run: |
          METRICS="coverage,bugs,code_smells,duplicated_lines_density"
          RESP=$(curl -s -u "${{ env.SONAR_TOKEN }}:" \
            "${{ env.SONAR_HOST_URL }}/api/measures/component?component=${{ env.SONAR_PROJECT_KEY }}&metricKeys=$METRICS")
          echo "coverage=$(echo $RESP | jq -r '.component.measures[] | select(.metric=="coverage").value')" >> $GITHUB_OUTPUT
          echo "bugs=$(echo $RESP | jq -r '.component.measures[] | select(.metric=="bugs").value')" >> $GITHUB_OUTPUT
          echo "smells=$(echo $RESP | jq -r '.component.measures[] | select(.metric=="code_smells").value')" >> $GITHUB_OUTPUT
          echo "dup=$(echo $RESP | jq -r '.component.measures[] | select(.metric=="duplicated_lines_density").value')" >> $GITHUB_OUTPUT

  notify:
    name: 📣 Send Slack Report
    needs: [build, sonar]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Slack Payload
        id: payload
        run: |
          GATE=${{ needs.sonar.outputs.quality_gate.outputs.status }}
          COVER=${{ needs.sonar.outputs.metrics.outputs.coverage }}
          BUGS=${{ needs.sonar.outputs.metrics.outputs.bugs }}
          SMELLS=${{ needs.sonar.outputs.metrics.outputs.smells }}
          DUP=${{ needs.sonar.outputs.metrics.outputs.dup }}
          COLOR="#36a64f"
          [ "$GATE" != "OK" ] && COLOR="#ff0000"
          cat > payload.json <<EOF
          {
            "attachments": [
              {
                "color": "${COLOR}",
                "title": "SonarQube Report • ${{ env.SONAR_PROJECT_KEY }}",
                "fields": [
                  { "title": "Gate Status",    "value": "${GATE}",   "short": true },
                  { "title": "Coverage (%)",   "value": "${COVER}",  "short": true },
                  { "title": "Bugs",           "value": "${BUGS}",   "short": true },
                  { "title": "Code Smells",    "value": "${SMELLS}", "short": true },
                  { "title": "Duplicated (%)", "value": "${DUP}",    "short": true },
                  { "title": "Run URL",        "value": "${{ github.run_url }}", "short": false }
                ],
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          echo "::set-output name=body::$(jq -c . payload.json)"
      - name: Send to Slack
        run: |
          curl -X POST "${{ env.SLACK_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            --data @payload.json
